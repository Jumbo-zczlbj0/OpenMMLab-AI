{"env_info": "sys.platform: linux\nPython: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Laptop GPU\nCUDA_HOME: /home/jumbo/miniconda3/envs/mmlab1\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='EfficientNet',\n        arch='b3',\n        drop_path_rate=0.2,\n        out_indices=(3, 4, 5),\n        frozen_stages=0,\n        norm_cfg=dict(type='BN', requires_grad=True, eps=0.001, momentum=0.01),\n        norm_eval=False,\n        init_cfg=dict(\n            type='Pretrained',\n            prefix='backbone',\n            checkpoint=\n            'https://download.openmmlab.com/mmclassification/v0/efficientnet/efficientnet-b3_3rdparty_8xb32-aa_in1k_20220119-5b4887a0.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[48, 136, 384],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=5,\n        relu_before_extra_convs=True,\n        no_norm_on_lateral=True,\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    bbox_head=dict(\n        type='RetinaSepBNHead',\n        num_classes=20,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        num_ins=5,\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = 'data/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=(896, 896),\n        ratio_range=(0.8, 1.2),\n        keep_ratio=True),\n    dict(type='RandomCrop', crop_size=(896, 896)),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896)),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(896, 896),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896)),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=2,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n            img_prefix='data/VOCdevkit/VOC2007/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ]),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=(896, 896),\n                ratio_range=(0.8, 1.2),\n                keep_ratio=True),\n            dict(type='RandomCrop', crop_size=(896, 896)),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896)),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/val.txt',\n        img_prefix='data/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(896, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size=(896, 896)),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/val.txt',\n        img_prefix='data/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(896, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size=(896, 896)),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nimg_size = (896, 896)\noptimizer_config = dict(grad_clip=None)\noptimizer = dict(\n    type='SGD',\n    lr=0.0001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(norm_decay_mult=0, bypass_duplicate=True))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=100,\n    warmup_ratio=0.1,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=1)\nwork_dir = 'work/resnet50/voc'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 371333709, "exp_name": "retinanet_effb3_fpn_crop896_8x4_1x_voc.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 5e-05, "memory": 12957, "data_time": 0.04653, "loss_cls": 1.17447, "loss_bbox": 1.35413, "loss": 2.5286, "time": 0.9383}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0001, "memory": 13076, "data_time": 0.00417, "loss_cls": 1.14028, "loss_bbox": 1.23991, "loss": 2.38019, "time": 0.5366}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.0001, "memory": 13076, "data_time": 0.00401, "loss_cls": 1.11696, "loss_bbox": 1.11844, "loss": 2.2354, "time": 0.42166}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.0001, "memory": 13076, "data_time": 0.00405, "loss_cls": 1.09329, "loss_bbox": 1.01456, "loss": 2.10785, "time": 0.46219}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.0001, "memory": 13076, "data_time": 0.00407, "loss_cls": 1.06615, "loss_bbox": 0.91336, "loss": 1.97952, "time": 0.42483}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.0001, "memory": 13076, "data_time": 0.00407, "loss_cls": 1.06606, "loss_bbox": 0.83537, "loss": 1.90143, "time": 0.41526}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.0001, "memory": 13076, "data_time": 0.0041, "loss_cls": 1.0571, "loss_bbox": 0.79048, "loss": 1.84757, "time": 0.41845}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.0001, "memory": 13315, "data_time": 0.00417, "loss_cls": 1.03719, "loss_bbox": 0.74156, "loss": 1.77875, "time": 0.46912}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.0001, "memory": 13315, "data_time": 0.00418, "loss_cls": 1.02302, "loss_bbox": 0.73137, "loss": 1.75439, "time": 0.42318}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 13315, "data_time": 0.00423, "loss_cls": 1.03194, "loss_bbox": 0.70201, "loss": 1.73396, "time": 0.42481}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0001, "memory": 13315, "data_time": 0.0042, "loss_cls": 1.02322, "loss_bbox": 0.68299, "loss": 1.70621, "time": 0.42658}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0001, "memory": 13315, "data_time": 0.00419, "loss_cls": 0.9847, "loss_bbox": 0.66947, "loss": 1.65418, "time": 0.42107}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0001, "memory": 13315, "data_time": 0.0042, "loss_cls": 0.99223, "loss_bbox": 0.65957, "loss": 1.65179, "time": 0.42645}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0001, "memory": 13315, "data_time": 0.00418, "loss_cls": 0.97557, "loss_bbox": 0.64756, "loss": 1.62313, "time": 0.42751}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0001, "memory": 13315, "data_time": 0.00423, "loss_cls": 0.98042, "loss_bbox": 0.65622, "loss": 1.63664, "time": 0.41676}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0001, "memory": 13315, "data_time": 0.00418, "loss_cls": 0.95023, "loss_bbox": 0.63443, "loss": 1.58466, "time": 0.43054}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0001, "memory": 13315, "data_time": 0.00424, "loss_cls": 0.98131, "loss_bbox": 0.63575, "loss": 1.61705, "time": 0.41972}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.0001, "memory": 13315, "data_time": 0.00427, "loss_cls": 0.97103, "loss_bbox": 0.62064, "loss": 1.59167, "time": 0.42809}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.0001, "memory": 13315, "data_time": 0.00436, "loss_cls": 0.9449, "loss_bbox": 0.63019, "loss": 1.57509, "time": 0.42827}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0001, "memory": 13315, "data_time": 0.00439, "loss_cls": 0.93657, "loss_bbox": 0.62793, "loss": 1.5645, "time": 0.4224}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.0001, "memory": 13315, "data_time": 0.00446, "loss_cls": 0.90859, "loss_bbox": 0.62555, "loss": 1.53414, "time": 0.43063}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.0001, "memory": 13315, "data_time": 0.00445, "loss_cls": 0.93226, "loss_bbox": 0.64264, "loss": 1.5749, "time": 0.43271}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.0001, "memory": 13315, "data_time": 0.00473, "loss_cls": 0.91282, "loss_bbox": 0.62223, "loss": 1.53504, "time": 0.43051}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.0001, "memory": 13315, "data_time": 0.00851, "loss_cls": 0.91243, "loss_bbox": 0.61258, "loss": 1.52501, "time": 0.45018}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.0001, "memory": 13315, "data_time": 0.00847, "loss_cls": 0.86825, "loss_bbox": 0.61157, "loss": 1.47982, "time": 0.44961}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.0001, "memory": 13315, "data_time": 0.00846, "loss_cls": 0.91283, "loss_bbox": 0.6117, "loss": 1.52453, "time": 0.44603}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.0001, "memory": 13315, "data_time": 0.00859, "loss_cls": 0.87092, "loss_bbox": 0.60674, "loss": 1.47766, "time": 0.45292}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.0001, "memory": 13315, "data_time": 0.0086, "loss_cls": 0.87362, "loss_bbox": 0.59637, "loss": 1.46999, "time": 0.45773}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.0001, "memory": 13315, "data_time": 0.00851, "loss_cls": 0.87905, "loss_bbox": 0.59659, "loss": 1.47564, "time": 0.448}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.0001, "memory": 13315, "data_time": 0.00842, "loss_cls": 0.86743, "loss_bbox": 0.59267, "loss": 1.4601, "time": 0.45051}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.0001, "memory": 13315, "data_time": 0.00846, "loss_cls": 0.8858, "loss_bbox": 0.59733, "loss": 1.48313, "time": 0.45128}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0001, "memory": 13315, "data_time": 0.00843, "loss_cls": 0.8418, "loss_bbox": 0.59065, "loss": 1.43245, "time": 0.448}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.0001, "memory": 13315, "data_time": 0.00859, "loss_cls": 0.85962, "loss_bbox": 0.59986, "loss": 1.45948, "time": 0.45647}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.0001, "memory": 13315, "data_time": 0.00864, "loss_cls": 0.86328, "loss_bbox": 0.59573, "loss": 1.45901, "time": 0.44426}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.0001, "memory": 13315, "data_time": 0.00861, "loss_cls": 0.81411, "loss_bbox": 0.60393, "loss": 1.41804, "time": 0.45129}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.0001, "memory": 13315, "data_time": 0.00863, "loss_cls": 0.8306, "loss_bbox": 0.5842, "loss": 1.41481, "time": 0.45268}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.0001, "memory": 13315, "data_time": 0.00892, "loss_cls": 0.82923, "loss_bbox": 0.58756, "loss": 1.41679, "time": 0.45641}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.0001, "memory": 13315, "data_time": 0.00911, "loss_cls": 0.81756, "loss_bbox": 0.58177, "loss": 1.39934, "time": 0.45591}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.0001, "memory": 13315, "data_time": 0.00911, "loss_cls": 0.81529, "loss_bbox": 0.58587, "loss": 1.40117, "time": 0.45171}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0001, "memory": 13315, "data_time": 0.009, "loss_cls": 0.79672, "loss_bbox": 0.57762, "loss": 1.37434, "time": 0.44924}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.0001, "memory": 13315, "data_time": 0.00878, "loss_cls": 0.81949, "loss_bbox": 0.58936, "loss": 1.40885, "time": 0.44841}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.0001, "memory": 13315, "data_time": 0.00862, "loss_cls": 0.82418, "loss_bbox": 0.58133, "loss": 1.40551, "time": 0.44334}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.0001, "memory": 13315, "data_time": 0.0087, "loss_cls": 0.79355, "loss_bbox": 0.58726, "loss": 1.38081, "time": 0.45212}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.0001, "memory": 13315, "data_time": 0.00882, "loss_cls": 0.77737, "loss_bbox": 0.58843, "loss": 1.3658, "time": 0.45463}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.0001, "memory": 13315, "data_time": 0.00881, "loss_cls": 0.77526, "loss_bbox": 0.56422, "loss": 1.33948, "time": 0.46303}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.0001, "memory": 13315, "data_time": 0.00889, "loss_cls": 0.79888, "loss_bbox": 0.56997, "loss": 1.36885, "time": 0.4546}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.0001, "memory": 13315, "data_time": 0.0092, "loss_cls": 0.78071, "loss_bbox": 0.56687, "loss": 1.34758, "time": 0.45523}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.0001, "memory": 13315, "data_time": 0.00913, "loss_cls": 0.78219, "loss_bbox": 0.56324, "loss": 1.34543, "time": 0.45182}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.0001, "memory": 13315, "data_time": 0.00908, "loss_cls": 0.77838, "loss_bbox": 0.56655, "loss": 1.34493, "time": 0.45364}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.0001, "memory": 13315, "data_time": 0.00905, "loss_cls": 0.76965, "loss_bbox": 0.57322, "loss": 1.34287, "time": 0.45185}
{"mode": "val", "epoch": 1, "iter": 2510, "lr": 0.0001, "mAP": 0.02807, "AP50": 0.028}
